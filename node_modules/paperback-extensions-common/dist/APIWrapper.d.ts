import './models/impl_export';
import { Source } from './base/Source';
import { Manga } from './models/Manga';
import { Chapter } from './models/Chapter';
import { ChapterDetails } from './models/ChapterDetails';
import { SearchRequest } from './models/SearchRequest';
import { MangaTile } from './models/MangaTile';
import { MangaUpdates } from '.';
export declare class APIWrapper {
    /**
     * Retrieves all relevant metadata from a source about particular manga
     *
     * @param source
     * @param ids
     */
    getMangaDetails(source: Source, ids: string[]): Promise<Manga[]>;
    /**
     * Retrieves all the chapters for a particular manga
     *
     * @param source
     * @param mangaId
     */
    getChapters(source: Source, mangaId: string): Promise<Chapter[]>;
    /**
     * Retrieves the images for a particular chapter of a manga
     *
     * @param source
     * @param mangaId
     * @param chId
     */
    getChapterDetails(source: Source, mangaId: string, chId: string): Promise<ChapterDetails>;
    /**
     * This would take in all the ids that the user is reading
     * then determines whether an update has come out since
     *
     * @param ids
     * @param referenceTime will only get manga up to this time
     * @returns List of the ids of the manga that were recently updated
     */
    filterUpdatedManga(source: Source, ids: string[], referenceTime: Date): Promise<MangaUpdates>;
    private makeFilterRequest;
    /**
     * Home page of the application consists of a few discover sections.
     * This will contain featured, newly updated, new manga, etc.
     *
     * @param none
     * @returns {Sections[]} List of sections
     */
    getHomePageSections(source: Source): Promise<any>;
    /**
     * Creates a search query for the source
     *
     * @param query
     * @param page
     */
    search(source: Source, query: SearchRequest, page: number): Promise<MangaTile[]>;
    getTags(source: Source): Promise<import(".").TagSection[]>;
    getViewMoreItems(source: Source, key: string, page: number): Promise<void>;
    private formatCookie;
}
